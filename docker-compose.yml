version: '3.8'

services:
  # ADES Main Application
  ades:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ades-app
    ports:
      - "8080:8080"  # Main web interface
      - "8081:8081"  # IDE integration
      - "8082:8082"  # Collaboration
      - "8083:8083"  # Visualization
    environment:
      - GAIT_PORT=8080
      - GAIT_DATA_DIR=/app/data
      - GAIT_CONFIG_PATH=/app/data/ades-config.json
      - GAIT_LOG_LEVEL=info
      - GAIT_ENABLE_METRICS=true
      - GAIT_REDIS_URL=redis://redis:6379
      - GAIT_POSTGRES_URL=postgres://ades:ades_password@postgres:5432/ades_db
    volumes:
      - ades_data:/app/data
      - ./repositories:/app/repositories:ro
    depends_on:
      - redis
      - postgres
    networks:
      - ades_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: ades-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ades_network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for advanced analytics and metrics
  postgres:
    image: postgres:15-alpine
    container_name: ades-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=ades_db
      - POSTGRES_USER=ades
      - POSTGRES_PASSWORD=ades_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployments/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ades_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ades -d ades_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: ades-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./deployments/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - ades_network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: ades-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=ades_admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployments/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./deployments/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - ades_network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: ades-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployments/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./deployments/nginx/ssl:/etc/nginx/ssl
    networks:
      - ades_network
    restart: unless-stopped
    depends_on:
      - ades

volumes:
  ades_data:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  ades_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 